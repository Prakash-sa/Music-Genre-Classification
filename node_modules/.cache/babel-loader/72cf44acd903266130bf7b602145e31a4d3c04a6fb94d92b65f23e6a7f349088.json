{"ast":null,"code":"var _jsxFileName = \"/Users/prakashsaini/Documents/React/react-web-audio/src/AudioVisualiser.js\";\nimport React, { Component } from 'react';\nclass AudioVisualiser extends Component {\n  constructor(props) {\n    super(props);\n    this.canvas = /*#__PURE__*/React.createRef();\n  }\n  componentDidUpdate() {\n    this.draw();\n  }\n  draw() {\n    const {\n      audioData\n    } = this.props;\n    const canvas = this.canvas.current;\n    const height = canvas.height;\n    const width = canvas.width;\n    const context = canvas.getContext('2d');\n    let x = 0;\n    const sliceWidth = width * 1.0 / audioData.length;\n    context.lineWidth = 2;\n    context.strokeStyle = '#000000';\n    context.clearRect(0, 0, width, height);\n    context.beginPath();\n    context.moveTo(0, height / 2);\n    for (const item of audioData) {\n      const y = item / 255.0 * height;\n      context.lineTo(x, y);\n      x += sliceWidth;\n    }\n    context.lineTo(x, height / 2);\n    context.stroke();\n  }\n  render() {\n    return /*#__PURE__*/React.createElement(\"canvas\", {\n      width: \"300\",\n      height: \"300\",\n      ref: this.canvas,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 12\n      }\n    });\n  }\n}\nexport default AudioVisualiser;","map":{"version":3,"names":["React","Component","AudioVisualiser","constructor","props","canvas","createRef","componentDidUpdate","draw","audioData","current","height","width","context","getContext","x","sliceWidth","length","lineWidth","strokeStyle","clearRect","beginPath","moveTo","item","y","lineTo","stroke","render"],"sources":["/Users/prakashsaini/Documents/React/react-web-audio/src/AudioVisualiser.js"],"sourcesContent":["import React, { Component } from 'react';\n\nclass AudioVisualiser extends Component {\n  constructor(props) {\n    super(props);\n    this.canvas = React.createRef();\n  }\n\n  componentDidUpdate() {\n    this.draw();\n  }\n\n  draw() {\n    const { audioData } = this.props;\n    const canvas = this.canvas.current;\n    const height = canvas.height;\n    const width = canvas.width;\n    const context = canvas.getContext('2d');\n    let x = 0;\n    const sliceWidth = (width * 1.0) / audioData.length;\n\n    context.lineWidth = 2;\n    context.strokeStyle = '#000000';\n    context.clearRect(0, 0, width, height);\n\n    context.beginPath();\n    context.moveTo(0, height / 2);\n    for (const item of audioData) {\n      const y = (item / 255.0) * height;\n      context.lineTo(x, y);\n      x += sliceWidth;\n    }\n    context.lineTo(x, height / 2);\n    context.stroke();\n  }\n\n  render() {\n    return <canvas width=\"300\" height=\"300\" ref={this.canvas} />;\n  }\n}\n\nexport default AudioVisualiser;\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AAExC,MAAMC,eAAe,SAASD,SAAS,CAAC;EACtCE,WAAW,CAACC,KAAK,EAAE;IACjB,KAAK,CAACA,KAAK,CAAC;IACZ,IAAI,CAACC,MAAM,gBAAGL,KAAK,CAACM,SAAS,EAAE;EACjC;EAEAC,kBAAkB,GAAG;IACnB,IAAI,CAACC,IAAI,EAAE;EACb;EAEAA,IAAI,GAAG;IACL,MAAM;MAAEC;IAAU,CAAC,GAAG,IAAI,CAACL,KAAK;IAChC,MAAMC,MAAM,GAAG,IAAI,CAACA,MAAM,CAACK,OAAO;IAClC,MAAMC,MAAM,GAAGN,MAAM,CAACM,MAAM;IAC5B,MAAMC,KAAK,GAAGP,MAAM,CAACO,KAAK;IAC1B,MAAMC,OAAO,GAAGR,MAAM,CAACS,UAAU,CAAC,IAAI,CAAC;IACvC,IAAIC,CAAC,GAAG,CAAC;IACT,MAAMC,UAAU,GAAIJ,KAAK,GAAG,GAAG,GAAIH,SAAS,CAACQ,MAAM;IAEnDJ,OAAO,CAACK,SAAS,GAAG,CAAC;IACrBL,OAAO,CAACM,WAAW,GAAG,SAAS;IAC/BN,OAAO,CAACO,SAAS,CAAC,CAAC,EAAE,CAAC,EAAER,KAAK,EAAED,MAAM,CAAC;IAEtCE,OAAO,CAACQ,SAAS,EAAE;IACnBR,OAAO,CAACS,MAAM,CAAC,CAAC,EAAEX,MAAM,GAAG,CAAC,CAAC;IAC7B,KAAK,MAAMY,IAAI,IAAId,SAAS,EAAE;MAC5B,MAAMe,CAAC,GAAID,IAAI,GAAG,KAAK,GAAIZ,MAAM;MACjCE,OAAO,CAACY,MAAM,CAACV,CAAC,EAAES,CAAC,CAAC;MACpBT,CAAC,IAAIC,UAAU;IACjB;IACAH,OAAO,CAACY,MAAM,CAACV,CAAC,EAAEJ,MAAM,GAAG,CAAC,CAAC;IAC7BE,OAAO,CAACa,MAAM,EAAE;EAClB;EAEAC,MAAM,GAAG;IACP,oBAAO;MAAQ,KAAK,EAAC,KAAK;MAAC,MAAM,EAAC,KAAK;MAAC,GAAG,EAAE,IAAI,CAACtB,MAAO;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EAAG;EAC9D;AACF;AAEA,eAAeH,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}